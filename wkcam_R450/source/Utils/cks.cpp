

#include "stdint.h"
#include "cks.h"



//8位CRC校验table
const uint8_t crc8_tbl[256]={
		0x00,	0x07,	0x0E,	0x09,	0x01C,	0x01B,	0x012,	0x015,
		0x038,	0x03F,	0x036,	0x031,	0x024,	0x023,	0x02A,	0x02D,
		0x070,	0x077,	0x07E,	0x079,	0x06C,	0x06B,	0x062,	0x065,
		0x048,	0x04F,	0x046,	0x041,	0x054,	0x053,	0x05A,	0x05D,
		0x0E0,	0x0E7,	0x0EE,	0x0E9,	0x0FC,	0x0FB,	0x0F2,	0x0F5,
		0x0D8,	0x0DF,	0x0D6,	0x0D1,	0x0C4,	0x0C3,	0x0CA,	0x0CD,
		0x090,	0x097,	0x09E,	0x099,	0x08C,	0x08B,	0x082,	0x085,
		0x0A8,	0x0AF,	0x0A6,	0x0A1,	0x0B4,	0x0B3,	0x0BA,	0x0BD,
		0x0C7,	0x0C0,	0x0C9,	0x0CE,	0x0DB,	0x0DC,	0x0D5,	0x0D2,
		0x0FF,	0x0F8,	0x0F1,	0x0F6,	0x0E3,	0x0E4,	0x0ED,	0x0EA,
		0x0B7,	0x0B0,	0x0B9,	0x0BE,	0x0AB,	0x0AC,	0x0A5,	0x0A2,
		0x08F,	0x088,	0x081,	0x086,	0x093,	0x094,	0x09D,	0x09A,
		0x027,	0x020,	0x029,	0x02E,	0x03B,	0x03C,	0x035,	0x032,
		0x01F,	0x018,	0x011,	0x016,	0x03,	0x04,	0x0D,	0x0A,
		0x057,	0x050,	0x059,	0x05E,	0x04B,	0x04C,	0x045,	0x042,
		0x06F,	0x068,	0x061,	0x066,	0x073,	0x074,	0x07D,	0x07A,
		0x089,	0x08E,	0x087,	0x080,	0x095,	0x092,	0x09B,	0x09C,
		0x0B1,	0x0B6,	0x0BF,	0x0B8,	0x0AD,	0x0AA,	0x0A3,	0x0A4,
		0x0F9,	0x0FE,	0x0F7,	0x0F0,	0x0E5,	0x0E2,	0x0EB,	0x0EC,
		0x0C1,	0x0C6,	0x0CF,	0x0C8,	0x0DD,	0x0DA,	0x0D3,	0x0D4,
		0x069,	0x06E,	0x067,	0x060,	0x075,	0x072,	0x07B,	0x07C,
		0x051,	0x056,	0x05F,	0x058,	0x04D,	0x04A,	0x043,	0x044,
		0x019,	0x01E,	0x017,	0x010,	0x05,	0x02,	0x0B,	0x0C,
		0x021,	0x026,	0x02F,	0x028,	0x03D,	0x03A,	0x033,	0x034,
		0x04E,	0x049,	0x040,	0x047,	0x052,	0x055,	0x05C,	0x05B,
		0x076,	0x071,	0x078,	0x07F,	0x06A,	0x06D,	0x064,	0x063,
		0x03E,	0x039,	0x030,	0x037,	0x022,	0x025,	0x02C,	0x02B,
		0x06,	0x01,	0x08,	0x0F,	0x01A,	0x01D,	0x014,	0x013,
		0x0AE,	0x0A9,	0x0A0,	0x0A7,	0x0B2,	0x0B5,	0x0BC,	0x0BB,
		0x096,	0x091,	0x098,	0x09F,	0x08A,	0x08D,	0x084,	0x083,
		0x0DE,	0x0D9,	0x0D0,	0x0D7,	0x0C2,	0x0C5,	0x0CC,	0x0CB,
		0x0E6,	0x0E1,	0x0E8,	0x0EF,	0x0FA,	0x0FD,	0x0F4,	0x0F3};

//16位CRC校验table
const uint16_t crc16_tbl[256]={
  		0x00000,0x0C0C1,0x0C181,0x00140,0x0C301,0x003C0,0x00280,0x0C241,
		0x0C601,0x006C0,0x00780,0x0C741,0x00500,0x0C5C1,0x0C481,0x00440,
		0x0CC01,0x00CC0,0x00D80,0x0CD41,0x00F00,0x0CFC1,0x0CE81,0x00E40,
		0x00A00,0x0CAC1,0x0CB81,0x00B40,0x0C901,0x009C0,0x00880,0x0C841,
		0x0D801,0x018C0,0x01980,0x0D941,0x01B00,0x0DBC1,0x0DA81,0x01A40,
		0x01E00,0x0DEC1,0x0DF81,0x01F40,0x0DD01,0x01DC0,0x01C80,0x0DC41,
		0x01400,0x0D4C1,0x0D581,0x01540,0x0D701,0x017C0,0x01680,0x0D641,
		0x0D201,0x012C0,0x01380,0x0D341,0x01100,0x0D1C1,0x0D081,0x01040,
		0x0F001,0x030C0,0x03180,0x0F141,0x03300,0x0F3C1,0x0F281,0x03240,
		0x03600,0x0F6C1,0x0F781,0x03740,0x0F501,0x035C0,0x03480,0x0F441,
		0x03C00,0x0FCC1,0x0FD81,0x03D40,0x0FF01,0x03FC0,0x03E80,0x0FE41,
		0x0FA01,0x03AC0,0x03B80,0x0FB41,0x03900,0x0F9C1,0x0F881,0x03840,
		0x02800,0x0E8C1,0x0E981,0x02940,0x0EB01,0x02BC0,0x02A80,0x0EA41,
		0x0EE01,0x02EC0,0x02F80,0x0EF41,0x02D00,0x0EDC1,0x0EC81,0x02C40,
		0x0E401,0x024C0,0x02580,0x0E541,0x02700,0x0E7C1,0x0E681,0x02640,
		0x02200,0x0E2C1,0x0E381,0x02340,0x0E101,0x021C0,0x02080,0x0E041,
		0x0A001,0x060C0,0x06180,0x0A141,0x06300,0x0A3C1,0x0A281,0x06240,
		0x06600,0x0A6C1,0x0A781,0x06740,0x0A501,0x065C0,0x06480,0x0A441, 
		0x06C00,0x0ACC1,0x0AD81,0x06D40,0x0AF01,0x06FC0,0x06E80,0x0AE41, 
		0x0AA01,0x06AC0,0x06B80,0x0AB41,0x06900,0x0A9C1,0x0A881,0x06840, 
		0x07800,0x0B8C1,0x0B981,0x07940,0x0BB01,0x07BC0,0x07A80,0x0BA41, 
		0x0BE01,0x07EC0,0x07F80,0x0BF41,0x07D00,0x0BDC1,0x0BC81,0x07C40, 
		0x0B401,0x074C0,0x07580,0x0B541,0x07700,0x0B7C1,0x0B681,0x07640, 
		0x07200,0x0B2C1,0x0B381,0x07340,0x0B101,0x071C0,0x07080,0x0B041, 
		0x05000,0x090C1,0x09181,0x05140,0x09301,0x053C0,0x05280,0x09241, 
		0x09601,0x056C0,0x05780,0x09741,0x05500,0x095C1,0x09481,0x05440, 
		0x09C01,0x05CC0,0x05D80,0x09D41,0x05F00,0x09FC1,0x09E81,0x05E40, 
		0x05A00,0x09AC1,0x09B81,0x05B40,0x09901,0x059C0,0x05880,0x09841, 
		0x08801,0x048C0,0x04980,0x08941,0x04B00,0x08BC1,0x08A81,0x04A40, 
		0x04E00,0x08EC1,0x08F81,0x04F40,0x08D01,0x04DC0,0x04C80,0x08C41, 
		0x04400,0x084C1,0x08581,0x04540,0x08701,0x047C0,0x04680,0x08641, 
		0x08201,0x042C0,0x04380,0x08341,0x04100,0x081C1,0x08081,0x04040};

//32位CRC校验table
const uint32_t crc32_tbl[256]={
  		0x000000000,0x077073096,0x0EE0E612C,0x0990951BA,0x0076DC419,0x0706AF48F,0x0E963A535,0x09E6495A3,
		0x00EDB8832,0x079DCB8A4,0x0E0D5E91E,0x097D2D988,0x009B64C2B,0x07EB17CBD,0x0E7B82D07,0x090BF1D91,
		0x01DB71064,0x06AB020F2,0x0F3B97148,0x084BE41DE,0x01ADAD47D,0x06DDDE4EB,0x0F4D4B551,0x083D385C7,
		0x0136C9856,0x0646BA8C0,0x0FD62F97A,0x08A65C9EC,0x014015C4F,0x063066CD9,0x0FA0F3D63,0x08D080DF5,
		0x03B6E20C8,0x04C69105E,0x0D56041E4,0x0A2677172,0x03C03E4D1,0x04B04D447,0x0D20D85FD,0x0A50AB56B,
		0x035B5A8FA,0x042B2986C,0x0DBBBC9D6,0x0ACBCF940,0x032D86CE3,0x045DF5C75,0x0DCD60DCF,0x0ABD13D59,
		0x026D930AC,0x051DE003A,0x0C8D75180,0x0BFD06116,0x021B4F4B5,0x056B3C423,0x0CFBA9599,0x0B8BDA50F,
		0x02802B89E,0x05F058808,0x0C60CD9B2,0x0B10BE924,0x02F6F7C87,0x058684C11,0x0C1611DAB,0x0B6662D3D,
		0x076DC4190,0x001DB7106,0x098D220BC,0x0EFD5102A,0x071B18589,0x006B6B51F,0x09FBFE4A5,0x0E8B8D433,
		0x07807C9A2,0x00F00F934,0x09609A88E,0x0E10E9818,0x07F6A0DBB,0x0086D3D2D,0x091646C97,0x0E6635C01,
		0x06B6B51F4,0x01C6C6162,0x0856530D8,0x0F262004E,0x06C0695ED,0x01B01A57B,0x08208F4C1,0x0F50FC457,
		0x065B0D9C6,0x012B7E950,0x08BBEB8EA,0x0FCB9887C,0x062DD1DDF,0x015DA2D49,0x08CD37CF3,0x0FBD44C65,
		0x04DB26158,0x03AB551CE,0x0A3BC0074,0x0D4BB30E2,0x04ADFA541,0x03DD895D7,0x0A4D1C46D,0x0D3D6F4FB,
		0x04369E96A,0x0346ED9FC,0x0AD678846,0x0DA60B8D0,0x044042D73,0x033031DE5,0x0AA0A4C5F,0x0DD0D7CC9,
		0x05005713C,0x0270241AA,0x0BE0B1010,0x0C90C2086,0x05768B525,0x0206F85B3,0x0B966D409,0x0CE61E49F,
		0x05EDEF90E,0x029D9C998,0x0B0D09822,0x0C7D7A8B4,0x059B33D17,0x02EB40D81,0x0B7BD5C3B,0x0C0BA6CAD,
		0x0EDB88320,0x09ABFB3B6,0x003B6E20C,0x074B1D29A,0x0EAD54739,0x09DD277AF,0x004DB2615,0x073DC1683,
		0x0E3630B12,0x094643B84,0x00D6D6A3E,0x07A6A5AA8,0x0E40ECF0B,0x09309FF9D,0x00A00AE27,0x07D079EB1,
		0x0F00F9344,0x08708A3D2,0x01E01F268,0x06906C2FE,0x0F762575D,0x0806567CB,0x0196C3671,0x06E6B06E7,
		0x0FED41B76,0x089D32BE0,0x010DA7A5A,0x067DD4ACC,0x0F9B9DF6F,0x08EBEEFF9,0x017B7BE43,0x060B08ED5,
		0x0D6D6A3E8,0x0A1D1937E,0x038D8C2C4,0x04FDFF252,0x0D1BB67F1,0x0A6BC5767,0x03FB506DD,0x048B2364B,
		0x0D80D2BDA,0x0AF0A1B4C,0x036034AF6,0x041047A60,0x0DF60EFC3,0x0A867DF55,0x0316E8EEF,0x04669BE79,
		0x0CB61B38C,0x0BC66831A,0x0256FD2A0,0x05268E236,0x0CC0C7795,0x0BB0B4703,0x0220216B9,0x05505262F,
		0x0C5BA3BBE,0x0B2BD0B28,0x02BB45A92,0x05CB36A04,0x0C2D7FFA7,0x0B5D0CF31,0x02CD99E8B,0x05BDEAE1D,
		0x09B64C2B0,0x0EC63F226,0x0756AA39C,0x0026D930A,0x09C0906A9,0x0EB0E363F,0x072076785,0x005005713,
		0x095BF4A82,0x0E2B87A14,0x07BB12BAE,0x00CB61B38,0x092D28E9B,0x0E5D5BE0D,0x07CDCEFB7,0x00BDBDF21,
		0x086D3D2D4,0x0F1D4E242,0x068DDB3F8,0x01FDA836E,0x081BE16CD,0x0F6B9265B,0x06FB077E1,0x018B74777,
		0x088085AE6,0x0FF0F6A70,0x066063BCA,0x011010B5C,0x08F659EFF,0x0F862AE69,0x0616BFFD3,0x0166CCF45,
		0x0A00AE278,0x0D70DD2EE,0x04E048354,0x03903B3C2,0x0A7672661,0x0D06016F7,0x04969474D,0x03E6E77DB,
		0x0AED16A4A,0x0D9D65ADC,0x040DF0B66,0x037D83BF0,0x0A9BCAE53,0x0DEBB9EC5,0x047B2CF7F,0x030B5FFE9,
		0x0BDBDF21C,0x0CABAC28A,0x053B39330,0x024B4A3A6,0x0BAD03605,0x0CDD70693,0x054DE5729,0x023D967BF,
		0x0B3667A2E,0x0C4614AB8,0x05D681B02,0x02A6F2B94,0x0B40BBE37,0x0C30C8EA1,0x05A05DF1B,0x02D02EF8D};

//和校验
uint8_t cks8_calc(uint8_t *buf,uint32_t length)
{
	uint8_t cks = 0;
	uint32_t i;
    
	for(i=0;i<length;i++)
	{
		cks += buf[i];  
	}
    
  	return(cks);
}


//8位CRC校验
uint8_t crc8_calc(uint8_t *buf,uint32_t length)
{
	uint8_t crc;
	uint16_t bch_ofst=0;
	uint32_t i;
    
	for(i=0; i<length; i++)
	{
		crc = buf[i] ^ crc8_tbl[bch_ofst];
		bch_ofst = crc;
	}
	crc = crc8_tbl[bch_ofst];
	crc ^= 0xff;
    
	return(crc) ;
}

//16位CRC校验
uint16_t crc16_calc(uint8_t *buf,uint32_t length)
{
	uint32_t pointer=0;
	uint16_t crc=0;
	unsigned char result_h,result_l;
	uint32_t i;
	
    for(i=0;i<length;i++)
	{
	 	uint8_t reg = (crc>>8) ^crc16_tbl[buf[pointer++]];
		crc = (crc<<8)^crc16_tbl[reg];
	}
	
    result_h = crc>>8;
	result_l = crc&0xff;
	crc = crc16_tbl[result_h] + crc16_tbl[result_l]*256;
    
	return(crc);
}

//32位CRC校验
uint32_t crc32_calc(uint8_t *buf,uint32_t length)
{
	uint32_t crc = 0xffffffff; //设置初始值
    
	uint32_t i;
    
	for(i=0;i<length;i++)
	{
		crc = crc32_tbl[(crc^((uint8_t*)buf)[i]) & 0xff]^(crc>>8); 
	}
    return(crc ^ 0xffffffff);
}


